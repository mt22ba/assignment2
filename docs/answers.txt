The date I went through the Git Lab Tutorials:02/20/2024
Dates I set up the GitHub account: 02/20/2024


1. console output from step 3.C:
[master 1db4b26] Add empty answers.txt file inside docs folder
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 docs/answers.txt
PS C:\Users\tranm\OneDrive\Desktop\COP 4020\Github\assignment2> git push origin master
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Delta compression using up to 12 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 352 bytes | 352.00 KiB/s, done.
Total 4 (delta 1), reused 1 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/mt22ba/assignment2.git
   f7f7cf6..1db4b26  master -> master


2. number of commits: 8
The git command I used: git rev-list --all --count

3. Last modification date of README.md:  Tue Feb 20 23:51:01 2024
The git command I used:   git log -1 -- README.md

4. Reason for using branches in Git: 
- branches allows us to create seperate contexts where we can try new things or even work on multiple ideas in parallel without risking the codebase
- multiple developers can work on different or different tasks simultaneously

5. Difference between git log and git status:
git status gathers information about the branch we are currently working on while git log displays the commit history for our branch. 

6.  The command I used to see the commits where"Vehicle.h" was one of the committed file:  git log -- Vehicle.h
7. The command I used to see the commits whose commit message contains the word "file": git log --grep="file"
8. Object-oriented programming concepts: 
- Inheritance is a mechanism where a new class is derived from an existing class.
- Polymorphism allows objects of different classes to be treated as objects of a common class
-Encapsulation is the process of combining multiple pieces of data into single class. It keeps class private so the class cannot be modified by external codes.

9. Difference between the Dictator and Lieutenants workflow and Intergration Manager workflow: 
in the Intergration Manager workflow , the Intergration Manager is responsible for pulling changes into the blessed repository. In the Dictator and Lieutenants workflow, the dictator has the final say on what gets intergrated into the blessed reposity. 

10. For a team of 100 developers, the Dictator and Lieutenants workflow allows more organized and scalable because the Dictator and Lieutenants supports distributed development and integration. Lieutenants can manager smaller teams allowing for simultaneous progress on multiple aspects of the project. 


